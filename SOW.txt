Project Title:
TCPoker (Texas Hold'em Poker)

Team:
Corey Collins 

Project Objective:
This project aims to implement a complete implementation of Texas Hold'em Poker, playable from the command-line. A central server will handle 2-9 continuous client connections, and
allow them to play class texas holdem poker against eachother. The server will manage the game state, such as managing the deck and dealing cards, meanwhile the clients will be the ones betting and selecting their winning hand.
There will be an algorithm to automatically determine the best poker hand, if players would prefer to focus on betting strategy.

Scope:
    Inclusions:
    [List the specific tasks, features, or components that will be included in the project.]
    2-9 clients can connect to the server and play poker against eachother, all using the command line
    Server manages the game state, such as managing the deck, and dealing cards to players and the community pool
    Players will start with money and can place bets during each betting round
    Players can check, call, raise, or fold depending on the actions of their fellow players
    Players will select their own best 5-card poker hand at the end, and compare it with the other players (who haven't folded)
    Whoever has the best hand wins the pot
    There will be an optional parameter to enable an algorithm to automatically determine the best poker hand, if players would rather focus on betting strategy.

    Exclusions:
    Any features not listed under 'inclusions' will be excluded. 

Deliverables:
tcpserver.py - A functioning python script for a TCP server, able to handle 2-9 concurrent client connections and the gamestate of Poker.
tcpclient.py - A functioning python script for a TCP client, which will connect to the TCP server
poker_test.py - A test file containing unit test confirming the functionality of the Poker game.

Timeline:
    Key Milestones:
    Create a functioning offline Texas Hold'em game. (9/31)
    Write unit tests to confirm the functionality of the Texas Hold'em game (10/15)
    Create a functioning TCP Server that is able to accept 2-9 concurrent client connections (10/31)
    Create a functioning TCP Client that is able to connect to the TCP Server and send communications. (10/31)
    Write unit tests to confirm the functionality of the TCP client and TCP server (11/15)
    Combine the offline Texas Hold'em game with the TCP server, having clients act as the players while the server manages gamestate (12/1)
    Write unit tests to confirm overall functionality (12/16)

    Task Breakdown:
    [Create a detailed breakdown of tasks, assigning estimated hours or days to each.]
    Creating a functioning offline Texas Hold'em game (Estimated time: 7 days)
    Writing unit tests to confirm the functionality of the game and "best hand" algorithm (Estimated time: 7 days)
    Creating a functioning TCP Server that can handle 2-9 concurrent connections (Estimated time: 15 days)
    Create a functioning TCP Client that is able to connect and communicate with the TCP Server (Estimated time: 15 days)
    Write unit tests to confirm the functionality of the TCP client and TCP server (Estimated time: 7 days)
    Combine the offline Texas Hold'em game with the TCP server, having clients act as players while the server manages gamestate (Estimated time: 15 days)
    Write unit tests to confirm overall functionality of application (Estimated time: 7 days)

Technical Requirements:
Hardware:
A computer to run the TCP Server script
2-9 other computers to run the TCP client script
Every computer should be connected to the internet

Software:
Python, socket, select, threading, time, random, enum. 
Any operating system will suffice

Assumptions:
A network connection on all computers is assumed.

Roles and Responsibilities:
I will be solo leading this project, including all components.

Communication Plan:
[Outline the communication channels and frequency for project updates, meetings, and decision-making.]
I am planning on weekly project updates, if not multiple times per week. 

Additional Notes:
Extra-credit, such as a Web UI and Encryption will be attempted once there is a solid enough foundation in place.